#!/bin/bash -e

source $OPENSHIFT_CARTRIDGE_SDK_BASH

BUILD=$(find . -name "jboss-fuse-full-6.1.0*" | sed 's/.*jboss-fuse-full-6.1.0.\(.*\).zip/\1/' | sort | tail -n 1)
FUSE_BIN_DIR=${OPENSHIFT_FUSE_DIR}/container/bin
FUSE_PID_FILE=${OPENSHIFT_FUSE_DIR}/container/instances/instance.properties
FUSE_PASSWD_FILE=${OPENSHIFT_FUSE_DIR}/container/etc/passwd
FUSE_USRPROPS_FILE=${OPENSHIFT_FUSE_DIR}/container/etc/users.properties
FUSE_SYSPROPS_FILE=${OPENSHIFT_FUSE_DIR}/container/etc/system.properties

function wait_for_start() {
  for i in {1..20};
     do
       if [ ! -f $FUSE_PID_FILE ]; then
         sleep 1
       else
         break
       fi
     done
   if [ -f $FUSE_PID_FILE ]; then
      for j in {1..20};
         do
           PID=`cat $FUSE_PID_FILE | grep "item.0.pid" | awk -F "=" '{print $2}'`
           if [ "$PID" = "" ]; then
             sleep 1
           else
            break
           fi
     done
     if ps -p $PID > /dev/null; then
       client_result "Fabric($PID) is started successfully"
     else
       client_error "Command Failed: Fuse process ($PID) is not running"
     fi
   else
    client_error "Command Failed:Could not find Fuse instance.properties"
   fi
}

function replace_property_value {
  sed "s/$1.*=.*/$1 = $2/g" $3 > $3.tmp
  rm $3
  mv $3.tmp $3
}

function sed_replace {
  sed "$1" $2 > $2.tmp
  rm $2
  mv $2.tmp $2
}

case "$1" in
  -v|--version)
    version="$2"
esac
echo "$version" > "$OPENSHIFT_FUSE_DIR/env/OPENSHIFT_FUSE_VERSION"

#Extract the Fuse Fabric Distribution
cd $OPENSHIFT_FUSE_DIR

unzip jboss-fuse-full-6.1.0.${BUILD}.zip >& /dev/null
ln -s jboss-fuse-full-6.1.0.${BUILD} container
rm -f jboss-fuse-full-6.1.0.${BUILD}.zip

# Make sure the scripts are executable
chmod a+x $OPENSHIFT_FUSE_DIR/container/bin/*

# Copy the version specific files into container directory
cd $OPENSHIFT_FUSE_DIR/versions/$version
files=$(find . -name \*)
for i in $files ; do
  if [ -d $i ]; then
    continue
  fi
  if [[ $i == *.erb ]]; then
    erb $i > $OPENSHIFT_FUSE_DIR/container/${i%.*}
  else
    cp $i $OPENSHIFT_FUSE_DIR/container/$i || :
  fi
done

# Remove Unsupported Profiles
cd $OPENSHIFT_FUSE_DIR/container/fabric/import/fabric/configs/versions/1.0/profiles
rm -rf controller-jon-server controller-rhq-agent controller-tomcat controller-wildfly openshift-jbossews.1 openshift-jbossews.2 docker
rm -rf gateway-haproxy gateway-http gateway-mq
rm -rf hadoop-base hadoop-datanode hadoop-namenode
# rm -rf insight insight-camel insight-core insight-hdfs insight-jetty insight-kibana
rm -rf jboss-brms-controller-tomcat jboss-brms-controller-wildfly jboss-brms-feature-workbench jboss-brms-feature-workbench.openshift
rm -rf mq-replicated
rm -rf openshift-aerogear-pushserver

#
# Edit some profiles.
for i in `grep -Rl OPENSHIFT_FUSE_AMQ_PORT .` ; do
  sed_replace 's/OPENSHIFT_FUSE_AMQ_PORT/OPENSHIFT_FUSE_APP_PORT_1/g' $i
done
for i in `grep -Rl OPENSHIFT_FUSE_AMQ_PROXY_PORT .` ; do
  sed_replace 's/OPENSHIFT_FUSE_AMQ_PROXY_PORT/OPENSHIFT_FUSE_APP_PORT_1_PROXY_PORT/g' $i
done

cd $OPENSHIFT_FUSE_DIR
# Append shutdown configuration
echo "" >> container/etc/config.properties
echo "karaf.shutdown.host=${OPENSHIFT_FUSE_IP}" >> container/etc/config.properties
echo "karaf.shutdown.port=${OPENSHIFT_FUSE_SHUTDOWN_PORT}" >> container/etc/config.properties
# Limit the maximum number of created threads
echo "felix.threading.timeout=0" >> container/etc/config.properties
client_result "Setting up fabric container"

# Retrieve password
if [ ! -z "${OPENSHIFT_FUSE_ZOOKEEPER_PASSWORD:-}" ]; then
    client_result "Using provided password from cartridge"
elif [ ! -z "${OPENSHIFT_FUSE_DOMAIN_ZOOKEEPER_PASSWORD:-}" ]; then
    client_result "Using provided password from domain"
    export OPENSHIFT_FUSE_ZOOKEEPER_PASSWORD=${OPENSHIFT_FUSE_DOMAIN_ZOOKEEPER_PASSWORD}
    set_env_var OPENSHIFT_FUSE_ZOOKEEPER_PASSWORD "${OPENSHIFT_FUSE_ZOOKEEPER_PASSWORD}" env
else
    # generate password and setup env vars
    client_result "Generating password"
    export OPENSHIFT_FUSE_ZOOKEEPER_PASSWORD=$(generate_password)
    set_env_var OPENSHIFT_FUSE_ZOOKEEPER_PASSWORD "${OPENSHIFT_FUSE_ZOOKEEPER_PASSWORD}" env
fi
# Store password
echo "admin=${OPENSHIFT_FUSE_ZOOKEEPER_PASSWORD},admin" > $FUSE_USRPROPS_FILE
echo "${OPENSHIFT_FUSE_ZOOKEEPER_PASSWORD}" > $FUSE_PASSWD_FILE
echo "zookeeper.password=${OPENSHIFT_FUSE_ZOOKEEPER_PASSWORD}" >> $FUSE_SYSPROPS_FILE

# Trust even self signed certs since OS gives us a self signed cert.
# echo "javax.net.ssl.trustAll=true" >> $FUSE_SYSPROPS_FILE

# Configure to join an existing fabric
join=false
if [ ! -z "${OPENSHIFT_FUSE_ZOOKEEPER_URL:-}" ]; then
    client_result "Using provided url from cartridge"
    echo "zookeeper.url=$OPENSHIFT_FUSE_ZOOKEEPER_URL" >> $FUSE_SYSPROPS_FILE
elif  [ ! -z "${OPENSHIFT_FUSE_DOMAIN_ZOOKEEPER_URL:-}" ]; then
    client_result "Using provided url from domain"
    export OPENSHIFT_FUSE_ZOOKEEPER_URL=${OPENSHIFT_FUSE_DOMAIN_ZOOKEEPER_URL}
    set_env_var OPENSHIFT_FUSE_ZOOKEEPER_URL "${OPENSHIFT_FUSE_ZOOKEEPER_URL}" env
    join=true
# Turn into a fabric root container
else
    # Additional system properties
    client_result "Configuring zookeeper server"
    export OPENSHIFT_FUSE_ZOOKEEPER_URL=${OPENSHIFT_GEAR_DNS}:${OPENSHIFT_FUSE_ZOOKEEPER_PROXY_PORT}
    set_env_var OPENSHIFT_FUSE_ZOOKEEPER_URL "${OPENSHIFT_FUSE_ZOOKEEPER_URL}" env
    replace_property_value ensemble.auto.start true $FUSE_SYSPROPS_FILE
    echo "zookeeper.server.port=${OPENSHIFT_FUSE_ZOOKEEPER_PORT}" >> $FUSE_SYSPROPS_FILE
    echo "zookeeper.server.connection.port=${OPENSHIFT_FUSE_ZOOKEEPER_PROXY_PORT}" >> $FUSE_SYSPROPS_FILE
fi

client_result ""
client_result "Fuse created successfully.  Please make note of these credentials:"
client_result ""
client_result "   Console URL:        http://${OPENSHIFT_GEAR_DNS}"
client_result "   Console User:       admin"
client_result "   Console Password:   ${OPENSHIFT_FUSE_ZOOKEEPER_PASSWORD}"
client_result "   Zookeeper URL:      ${OPENSHIFT_FUSE_ZOOKEEPER_URL}"
client_result "   Zookeeper Password: ${OPENSHIFT_FUSE_ZOOKEEPER_PASSWORD}"
client_result ""
client_result "   The Fuse Management Console will be available shortly at: http://${OPENSHIFT_GEAR_DNS}"
client_result ""

cart_props "username=admin"
cart_props "password=${OPENSHIFT_FUSE_ZOOKEEPER_PASSWORD}"
    

if $join; then
    ${FUSE_BIN_DIR}/start
    wait_for_start    
    ${FUSE_BIN_DIR}/client -r 3 -d 10 -h ${OPENSHIFT_FUSE_IP} -a ${OPENSHIFT_FUSE_SSH_PORT} -u admin -p ${OPENSHIFT_FUSE_ZOOKEEPER_PASSWORD} "wait-for-service io.fabric8.boot.commands.service.Join"
    ${FUSE_BIN_DIR}/client -h ${OPENSHIFT_FUSE_IP} -a ${OPENSHIFT_FUSE_SSH_PORT} -u admin -p ${OPENSHIFT_FUSE_ZOOKEEPER_PASSWORD} "fabric:join -f -b ${OPENSHIFT_FUSE_IP} --zookeeper-password ${OPENSHIFT_FUSE_ZOOKEEPER_PASSWORD} ${OPENSHIFT_FUSE_ZOOKEEPER_URL}"
    client_result "WARNING: Creating fabric containers directly from"
    client_result "         openshift is supported in a limited way"
    client_result "         as such containers can not be fully managed"
    client_result "         by fabric."
else
    add_domain_env_var "OPENSHIFT_FUSE_DOMAIN_ZOOKEEPER_URL=${OPENSHIFT_FUSE_ZOOKEEPER_URL}"
    add_domain_env_var "OPENSHIFT_FUSE_DOMAIN_ZOOKEEPER_PASSWORD=${OPENSHIFT_FUSE_ZOOKEEPER_PASSWORD}"
fi

